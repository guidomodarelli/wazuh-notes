---
import { getCollection } from 'astro:content';
import Cards from './Cards.astro';
import SearchWithDropdown, { type DropdownButton } from './SearchWithDropdown.astro';
import { type Props as CardProps } from './Card.astro';
import { extractAdocFilenamesFromCollection } from '../content/extract-adoc-filenames-from-collection';
import { COLLECTION } from '../content/constants';
import { getAdocFileFromCollection } from '../content/get-adoc-file-from-collection';
import { schemaFaq, schemaApp } from '../content/schema';

async function getAdocFiles(collection: COLLECTION) {
  const adocFileNames = await extractAdocFilenamesFromCollection(collection);
  const result = [];
  for (const adocAppFileName of adocFileNames) {
    const adoc = await getAdocFileFromCollection(collection, adocAppFileName);
    result.push(adoc);
  }
  return result;
}

// https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#limitations
const adocFaqs = await getAdocFiles(COLLECTION.FAQS);
const adocApps = await getAdocFiles(COLLECTION.APPS);

const faqs = await getCollection(COLLECTION.FAQS);

const FAQ_HREF_PREFIX = `/content/${COLLECTION.FAQS}`;
const APPS_HREF_PREFIX = `/content/${COLLECTION.APPS}`;

const cards: CardProps[] = [
  ...faqs.map(({ data, slug, collection }) => {
    return {
      title: data.title,
      description: data.description,
      btnHref: `${FAQ_HREF_PREFIX}/${slug}`,
      tags: data.tags,
      type: collection,
      slug,
    };
  }),
  ...adocFaqs.map((adoc) => {
    schemaFaq.parse({
      date: adoc.frontmatter.asciidoc.date,
      title: adoc.frontmatter.asciidoc.doctitle,
      description: adoc.frontmatter.asciidoc.description,
      author: adoc.frontmatter.asciidoc.author,
      tags: JSON.parse(adoc.frontmatter.asciidoc.tags ?? '[]'),
      version: adoc.frontmatter.asciidoc.version,
    });
    return {
      title: adoc.frontmatter.asciidoc.doctitle,
      description: adoc.frontmatter.asciidoc.description,
      btnHref: `${FAQ_HREF_PREFIX}/${adoc.frontmatter.asciidoc.docname}`,
      tags: JSON.parse(adoc.frontmatter.asciidoc.tags ?? '[]'),
      type: COLLECTION.FAQS,
      slug: adoc.frontmatter.asciidoc.docname,
    };
  }),
  // ...adocApps.map((adoc) => {
  //   schemaApp.parse({
  //     date: adoc.frontmatter.asciidoc.date,
  //     appname: adoc.frontmatter.asciidoc.appname,
  //     description: adoc.frontmatter.asciidoc.description,
  //     author: adoc.frontmatter.asciidoc.author,
  //     doclink: adoc.frontmatter.asciidoc.doclink,
  //   });
  //   return {
  //     title: adoc.frontmatter.asciidoc.appname,
  //     description: adoc.frontmatter.asciidoc.description,
  //     btnHref: `${APPS_HREF_PREFIX}/${adoc.frontmatter.asciidoc.docname}`,
  //     type: COLLECTION.APPS,
  //     slug: adoc.frontmatter.asciidoc.docname,
  //   };
  // }),
];

const dropdownButtons: DropdownButton[] = [
  {
    key: 'all',
    label: 'All',
  },
  {
    key: COLLECTION.APPS,
    label: 'Apps',
  },
  {
    key: COLLECTION.FAQS,
    label: 'FAQs',
  },
];
---

<script>
  import type { DropdownButton } from './SearchWithDropdown.astro';

  const includesText = (searchQuery: string) => {
    return (text?: string) => text?.toLowerCase().includes(searchQuery?.toLowerCase());
  };

  const showDropdown = (dropdown: HTMLElement) => {
    dropdown.classList.remove('hidden');
    dropdown.classList.add('block');
  };

  const hideDropdown = (dropdown: HTMLElement) => {
    dropdown.classList.remove('block');
    dropdown.classList.add('hidden');
  };

  const initializeDropdownListeners = () => {
    const dropdownButton = document.querySelector('#dropdown-button') as HTMLElement;
    const dropdown = document.querySelector('#dropdown') as HTMLElement;
    const dropdownButtons = document.querySelectorAll('[data-dropdown-button]') as NodeListOf<HTMLElement>;

    const toggleDropdownVisibility = () => {
      if (dropdown.classList.contains('hidden')) {
        showDropdown(dropdown);
      } else {
        hideDropdown(dropdown);
      }
    };

    const filterCardsByType = (dropdownButtonData: DropdownButton) => {
      const cards = document.querySelectorAll('[data-card]') as NodeListOf<HTMLElement>;

      const shouldShowCard = (cardType: string | undefined, key: string): boolean => {
        return key === 'all' || cardType === key;
      };

      cards.forEach((card) => {
        const cardType = card.dataset.cardType;
        if (shouldShowCard(cardType, dropdownButtonData.key)) {
          delete card.dataset.cardDontShowOnType;
        } else {
          card.dataset.cardDontShowOnType = '';
        }
      });
    };

    const handleDropdownButtonClick = (button: HTMLElement) => {
      button.addEventListener('click', () => {
        const dropdownButtonData = JSON.parse(button.dataset.dropdownButton ?? '{}') as DropdownButton;
        // change the dropdown button label
        dropdownButton.querySelector('span')!.textContent = dropdownButtonData.label;
        filterCardsByType(dropdownButtonData);
        hideDropdown(dropdown);
      });
    };

    const handleDocumentClick = (event: MouseEvent) => {
      if (!dropdown.contains(event.target as Node) && !dropdownButton.contains(event.target as Node)) {
        hideDropdown(dropdown);
      }
    };

    dropdownButton.addEventListener('click', toggleDropdownVisibility);
    dropdownButtons.forEach(handleDropdownButtonClick);
    document.addEventListener('click', handleDocumentClick);
  };

  const setupSearch = () => {
    const searchForm = document.querySelector('#search-dropdown-form') as HTMLFormElement;
    const searchInput = document.querySelector('#search-dropdown') as HTMLInputElement;
    const cards = document.querySelectorAll('[data-card]') as NodeListOf<HTMLElement>;

    searchForm.addEventListener('submit', (event) => {
      event.preventDefault();
    });

    searchInput.focus();

    searchInput.addEventListener('input', (event) => {
      const inputText = (event.target as HTMLInputElement)?.value.toLowerCase().trim();

      const doesCardMatchSearch = (card: HTMLElement): boolean => {
        const { title, description, tags } = JSON.parse(
          card.dataset.card ?? '{}',
        ) as import('./Card.astro').Props;
        return (
          includesText(inputText)(title) ||
          includesText(inputText)(description) ||
          tags?.some(includesText(inputText)) ||
          false
        );
      };

      cards.forEach((card) => {
        if (!inputText || doesCardMatchSearch(card)) {
          delete card.dataset.cardDontMatchSearch;
        } else {
          card.dataset.cardDontMatchSearch = '';
        }
      });
    });

    const searchQuery = new URLSearchParams(window.location.search).get('q');
    if (searchQuery) {
      searchInput.value = searchQuery;
      searchInput.dispatchEvent(new Event('input'));
    }
  };

  // Execute setupSearch when the page is loaded
  window.addEventListener('DOMContentLoaded', () => {
    setupSearch();
    initializeDropdownListeners();
  });
</script>

<SearchWithDropdown class="mb-6" dropdownButtons={dropdownButtons} />
<Cards cards={cards} />
