---
import { getCollection } from 'astro:content';
import Cards from './Cards.astro';
import SearchWithDropdown, { type DropdownButton } from './SearchWithDropdown.astro';
import { type Props as CardProps } from './Card.astro';
import { extractAdocFilenamesFromCollection } from '../content/extract-adoc-filenames-from-collection';
import { COLLECTION } from '../content/constants';
import { getAdocFileFromCollection } from '../content/get-adoc-file-from-collection';
import { schemaFaq, schemaApp, schemaVagrant } from '../content/schema';

async function fetchAdocFilesFromCollection(collection: COLLECTION) {
  const adocFilenames = await extractAdocFilenamesFromCollection(collection);
  const result = [];
  for (const adocFilename of adocFilenames) {
    const adoc = getAdocFileFromCollection(collection, adocFilename);
    result.push(adoc);
  }
  return result;
}

// https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#limitations
const adocFaqs = await fetchAdocFilesFromCollection(COLLECTION.FAQS);
const adocApps = await fetchAdocFilesFromCollection(COLLECTION.APPS);
const vagrantApps = await fetchAdocFilesFromCollection(COLLECTION.VAGRANTS);

const faqs = await getCollection(COLLECTION.FAQS);

const FAQ_HREF_PREFIX = `/content/${COLLECTION.FAQS}`;
const APPS_HREF_PREFIX = `/content/${COLLECTION.APPS}`;
const VAGRANT_HREF_PREFIX = `/content/${COLLECTION.VAGRANTS}`;

const cards: CardProps[] = [
  ...faqs.map(({ data, slug, collection }) => {
    return {
      title: data.title,
      tags: data.tags,
      description: data.description,
      btnHref: `${FAQ_HREF_PREFIX}/${slug}`,
      type: collection,
      slug,
    };
  }),
  ...adocFaqs.map((adoc) => {
    schemaFaq.parse({
      date: adoc.getAttribute('date'),
      title: adoc.getAttribute('doctitle'),
      tags: JSON.parse(adoc.getAttribute('tags') ?? '[]'),
      description: adoc.getAttribute('description'),
      author: adoc.getAttribute('author'),
      version: adoc.getAttribute('version'),
    });
    return {
      title: adoc.getAttribute('doctitle'),
      tags: JSON.parse(adoc.getAttribute('tags') ?? '[]'),
      description: adoc.getAttribute('description'),
      btnHref: `${FAQ_HREF_PREFIX}/${adoc.getAttribute('docname')}`,
      type: COLLECTION.FAQS,
      slug: adoc.getAttribute('docname'),
    };
  }),
  ...adocApps.map((adoc) => {
    schemaApp.parse({
      date: adoc.getAttribute('date'),
      title: adoc.getAttribute('doctitle'),
      tags: JSON.parse(adoc.getAttribute('tags') ?? '[]'),
      description: adoc.getAttribute('description'),
      author: adoc.getAttribute('author'),
      doclink: adoc.getAttribute('doclink'),
    });
    return {
      title: adoc.getAttribute('doctitle'),
      tags: JSON.parse(adoc.getAttribute('tags') ?? '[]'),
      description: adoc.getAttribute('description'),
      btnHref: `${APPS_HREF_PREFIX}/${adoc.getAttribute('docname')}`,
      type: COLLECTION.APPS,
      slug: adoc.getAttribute('docname'),
    };
  }),
  ...vagrantApps.map((adoc) => {
    schemaVagrant.parse({
      date: adoc.getAttribute('date'),
      title: adoc.getAttribute('doctitle'),
      tags: JSON.parse(adoc.getAttribute('tags') ?? '[]'),
      description: adoc.getAttribute('description'),
      author: adoc.getAttribute('author'),
      link: adoc.getAttribute('link'),
    });
    return {
      title: adoc.getAttribute('doctitle'),
      tags: JSON.parse(adoc.getAttribute('tags') ?? '[]'),
      description: adoc.getAttribute('description'),
      btnHref: `${VAGRANT_HREF_PREFIX}/${adoc.getAttribute('docname')}`,
      type: COLLECTION.VAGRANTS,
      slug: adoc.getAttribute('docname'),
    };
  }),
];

const dropdownButtons: DropdownButton[] = [
  {
    key: 'all',
    label: 'All',
  },
  {
    key: COLLECTION.APPS,
    label: 'Apps',
  },
  {
    key: COLLECTION.FAQS,
    label: 'FAQs',
  },
  {
    key: COLLECTION.VAGRANTS,
    label: 'Vagrants',
  },
];
---

<script>
  import { setupSearch } from '../scripts/setup-search';
  import { initializeDropdownListeners } from '../scripts/initialize-dropdown-listeners';

  setupSearch();
  initializeDropdownListeners();
</script>

<SearchWithDropdown class="mb-6" dropdownButtons={dropdownButtons} />
<Cards cards={cards} />
